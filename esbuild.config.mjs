import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import * as fs from "node:fs";
import path from "node:path";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");
const destinationDir = 'E:\\Important\\Tempory\\Knowledge\\.obsidian\\plugins\\meta-editor';

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outdir: destinationDir,
});

if (!fs.existsSync(destinationDir)) {
	fs.mkdirSync(destinationDir, { recursive: true });
}
fs.copyFileSync('styles.css', path.join(destinationDir, 'styles.css'));
fs.copyFileSync('manifest.json', path.join(destinationDir, 'manifest.json'));

fs.watch('styles.css', () => fs.copyFileSync('styles.css', path.join(destinationDir, 'styles.css')));
fs.watch('manifest.json', () => fs.copyFileSync('manifest.json', path.join(destinationDir, 'manifest.json')));

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
